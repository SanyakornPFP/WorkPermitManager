//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 08/02/2025 11:07:43
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using WorkPermitManager.Models;
using Microsoft.Extensions.Configuration;

namespace WorkPermitManager.Data
{

    public partial class Db_WorkPermitManagerModel : DbContext
    {

        public Db_WorkPermitManagerModel() :
            base()
        {
            OnCreated();
        }

        public Db_WorkPermitManagerModel(DbContextOptions<Db_WorkPermitManagerModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(GetConnectionString("WorkPermitManagerModelConnectionString"));
                optionsBuilder.UseLazyLoadingProxies();
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Company> Companies
        {
            get;
            set;
        }

        public virtual DbSet<Department> Departments
        {
            get;
            set;
        }

        public virtual DbSet<Position> Positions
        {
            get;
            set;
        }

        public virtual DbSet<PowerOfAttorney> PowerOfAttorneys
        {
            get;
            set;
        }

        public virtual DbSet<UserPermission> UserPermissions
        {
            get;
            set;
        }

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        public virtual DbSet<LogSystemData> LogSystemDatas
        {
            get;
            set;
        }

        public virtual DbSet<LoginHistory> LoginHistories
        {
            get;
            set;
        }

        public virtual DbSet<BusinessType> BusinessTypes
        {
            get;
            set;
        }

        public virtual DbSet<Director> Directors
        {
            get;
            set;
        }

        public virtual DbSet<DocumentType> DocumentTypes
        {
            get;
            set;
        }

        public virtual DbSet<EmployerAddress> EmployerAddresses
        {
            get;
            set;
        }

        public virtual DbSet<EmployerContact> EmployerContacts
        {
            get;
            set;
        }

        public virtual DbSet<EmployerDocument> EmployerDocuments
        {
            get;
            set;
        }

        public virtual DbSet<EmployerJob> EmployerJobs
        {
            get;
            set;
        }

        public virtual DbSet<Employer> Employers
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.CompanyMapping(modelBuilder);
            this.CustomizeCompanyMapping(modelBuilder);

            this.DepartmentMapping(modelBuilder);
            this.CustomizeDepartmentMapping(modelBuilder);

            this.PositionMapping(modelBuilder);
            this.CustomizePositionMapping(modelBuilder);

            this.PowerOfAttorneyMapping(modelBuilder);
            this.CustomizePowerOfAttorneyMapping(modelBuilder);

            this.UserPermissionMapping(modelBuilder);
            this.CustomizeUserPermissionMapping(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            this.LogSystemDataMapping(modelBuilder);
            this.CustomizeLogSystemDataMapping(modelBuilder);

            this.LoginHistoryMapping(modelBuilder);
            this.CustomizeLoginHistoryMapping(modelBuilder);

            this.BusinessTypeMapping(modelBuilder);
            this.CustomizeBusinessTypeMapping(modelBuilder);

            this.DirectorMapping(modelBuilder);
            this.CustomizeDirectorMapping(modelBuilder);

            this.DocumentTypeMapping(modelBuilder);
            this.CustomizeDocumentTypeMapping(modelBuilder);

            this.EmployerAddressMapping(modelBuilder);
            this.CustomizeEmployerAddressMapping(modelBuilder);

            this.EmployerContactMapping(modelBuilder);
            this.CustomizeEmployerContactMapping(modelBuilder);

            this.EmployerDocumentMapping(modelBuilder);
            this.CustomizeEmployerDocumentMapping(modelBuilder);

            this.EmployerJobMapping(modelBuilder);
            this.CustomizeEmployerJobMapping(modelBuilder);

            this.EmployerMapping(modelBuilder);
            this.CustomizeEmployerMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Company Mapping

        private void CompanyMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Company>().ToTable(@"Companies", @"dbo");
            modelBuilder.Entity<Company>().Property(x => x.CompanyID).HasColumnName(@"CompanyID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Company>().Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Company>().Property(x => x.CompanyAddress).HasColumnName(@"CompanyAddress").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Company>().Property(x => x.OwnerSystem).HasColumnName(@"OwnerSystem").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Company>().Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Company>().Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Company>().Property(x => x.UserManageID).HasColumnName(@"UserManageID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<Company>().Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Company>().HasKey(@"CompanyID");
        }

        partial void CustomizeCompanyMapping(ModelBuilder modelBuilder);

        #endregion

        #region Department Mapping

        private void DepartmentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Department>().ToTable(@"Departments", @"dbo");
            modelBuilder.Entity<Department>().Property(x => x.DepartmentID).HasColumnName(@"DepartmentID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Department>().Property(x => x.DepartmentName).HasColumnName(@"DepartmentName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Department>().Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Department>().Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Department>().Property(x => x.UserManageID).HasColumnName(@"UserManageID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<Department>().Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Department>().HasKey(@"DepartmentID");
        }

        partial void CustomizeDepartmentMapping(ModelBuilder modelBuilder);

        #endregion

        #region Position Mapping

        private void PositionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Position>().ToTable(@"Positions", @"dbo");
            modelBuilder.Entity<Position>().Property(x => x.PositionID).HasColumnName(@"PositionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Position>().Property(x => x.PositionName).HasColumnName(@"PositionName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Position>().Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Position>().Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Position>().Property(x => x.UserManageID).HasColumnName(@"UserManageID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<Position>().Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Position>().HasKey(@"PositionID");
        }

        partial void CustomizePositionMapping(ModelBuilder modelBuilder);

        #endregion

        #region PowerOfAttorney Mapping

        private void PowerOfAttorneyMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PowerOfAttorney>().ToTable(@"PowerOfAttorney", @"dbo");
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.PowerOfAttorneyID).HasColumnName(@"PowerOfAttorneyID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.CodeForm).HasColumnName(@"CodeForm").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.CompanyID).HasColumnName(@"CompanyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.GrantorID).HasColumnName(@"GrantorID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.AttorneyID).HasColumnName(@"AttorneyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.GrantorApprovalStatus).HasColumnName(@"GrantorApprovalStatus").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20).HasDefaultValueSql(@"N'รอการอนุมัติ'");
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.GrantorApprovalBy).HasColumnName(@"GrantorApprovalBy").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.GrantorDateApprove).HasColumnName(@"GrantorDateApprove").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.AttorneyApprovalStatus).HasColumnName(@"AttorneyApprovalStatus").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20).HasDefaultValueSql(@"N'รอการอนุมัติ'");
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.AttorneyApprovalBy).HasColumnName(@"AttorneyApprovalBy").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.AttorneyDateApprove).HasColumnName(@"AttorneyDateApprove").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.WitnessApprovalStatus1).HasColumnName(@"WitnessApprovalStatus1").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20).HasDefaultValueSql(@"N'รอการอนุมัติ'");
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.WitnessApprovalBy1).HasColumnName(@"WitnessApprovalBy1").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.WitnessDateApprove1).HasColumnName(@"WitnessDateApprove1").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.WitnessApprovalStatus2).HasColumnName(@"WitnessApprovalStatus2").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20).HasDefaultValueSql(@"N'รอการอนุมัติ'");
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.WitnessApprovalBy2).HasColumnName(@"WitnessApprovalBy2").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.WitnessDateApprove2).HasColumnName(@"WitnessDateApprove2").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.Status).HasColumnName(@"Status").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"N'รอการอนุมัติ'");
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.UserManageID).HasColumnName(@"UserManageID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.UserIDCreated).HasColumnName(@"UserIDCreated").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<PowerOfAttorney>().HasKey(@"PowerOfAttorneyID");
        }

        partial void CustomizePowerOfAttorneyMapping(ModelBuilder modelBuilder);

        #endregion

        #region UserPermission Mapping

        private void UserPermissionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UserPermission>().ToTable(@"UserPermissions", @"dbo");
            modelBuilder.Entity<UserPermission>().Property(x => x.PermissionID).HasColumnName(@"PermissionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<UserPermission>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<UserPermission>().Property(x => x.FunctionName).HasColumnName(@"FunctionName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<UserPermission>().Property(x => x.CanCreate).HasColumnName(@"CanCreate").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<UserPermission>().Property(x => x.CanRead).HasColumnName(@"CanRead").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<UserPermission>().Property(x => x.CanUpdate).HasColumnName(@"CanUpdate").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<UserPermission>().Property(x => x.CanDelete).HasColumnName(@"CanDelete").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<UserPermission>().Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<UserPermission>().Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<UserPermission>().Property(x => x.UserManageID).HasColumnName(@"UserManageID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<UserPermission>().Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<UserPermission>().HasKey(@"PermissionID");
        }

        partial void CustomizeUserPermissionMapping(ModelBuilder modelBuilder);

        #endregion

        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"Users", @"dbo");
            modelBuilder.Entity<User>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<User>().Property(x => x.Username).HasColumnName(@"Username").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property(x => x.Passwordhash).HasColumnName(@"Passwordhash").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<User>().Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<User>().Property(x => x.PositionID).HasColumnName(@"PositionID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<User>().Property(x => x.DepartmentID).HasColumnName(@"DepartmentID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<User>().Property(x => x.CompanyID).HasColumnName(@"CompanyID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<User>().Property(x => x.CardID).HasColumnName(@"CardID").HasColumnType(@"char(13)").ValueGeneratedNever().HasMaxLength(13);
            modelBuilder.Entity<User>().Property(x => x.ProfilePicture).HasColumnName(@"ProfilePicture").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.Signature).HasColumnName(@"Signature").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.Email).HasColumnName(@"Email").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<User>().Property(x => x.ManageSendEmail).HasColumnName(@"ManageSendEmail").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<User>().Property(x => x.LoginDate).HasColumnName(@"LoginDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<User>().Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<User>().Property(x => x.UserManageID).HasColumnName(@"UserManageID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<User>().Property(x => x.AdministratorActive).HasColumnName(@"AdministratorActive").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<User>().Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<User>().HasKey(@"UserID");
            modelBuilder.Entity<User>().HasIndex(@"CardID").IsUnique(true);
        }

        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region LogSystemData Mapping

        private void LogSystemDataMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<LogSystemData>().ToTable(@"LogSystemData", @"dbo");
            modelBuilder.Entity<LogSystemData>().Property(x => x.LogID).HasColumnName(@"LogID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<LogSystemData>().Property(x => x.TableName).HasColumnName(@"TableName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<LogSystemData>().Property(x => x.Action).HasColumnName(@"Action").HasColumnType(@"nvarchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LogSystemData>().Property(x => x.RecordID).HasColumnName(@"RecordID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<LogSystemData>().Property(x => x.UserManageID).HasColumnName(@"UserManageID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<LogSystemData>().Property(x => x.ActionTime).HasColumnName(@"ActionTime").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<LogSystemData>().Property(x => x.IPAddress).HasColumnName(@"IPAddress").HasColumnType(@"nvarchar(45)").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<LogSystemData>().Property(x => x.Description).HasColumnName(@"Description").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<LogSystemData>().Property(x => x.OldValue).HasColumnName(@"OldValue").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<LogSystemData>().Property(x => x.NewValue).HasColumnName(@"NewValue").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<LogSystemData>().HasKey(@"LogID");
        }

        partial void CustomizeLogSystemDataMapping(ModelBuilder modelBuilder);

        #endregion

        #region LoginHistory Mapping

        private void LoginHistoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<LoginHistory>().ToTable(@"LoginHistory", @"dbo");
            modelBuilder.Entity<LoginHistory>().Property(x => x.LoginID).HasColumnName(@"LoginID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<LoginHistory>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<LoginHistory>().Property(x => x.LoginTime).HasColumnName(@"LoginTime").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<LoginHistory>().Property(x => x.LogoutTime).HasColumnName(@"LogoutTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<LoginHistory>().Property(x => x.IPAddress).HasColumnName(@"IPAddress").HasColumnType(@"nvarchar(45)").ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<LoginHistory>().Property(x => x.DeviceInfo).HasColumnName(@"DeviceInfo").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<LoginHistory>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<LoginHistory>().HasKey(@"LoginID");
        }

        partial void CustomizeLoginHistoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region BusinessType Mapping

        private void BusinessTypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BusinessType>().ToTable(@"BusinessTypes", @"dbo");
            modelBuilder.Entity<BusinessType>().Property(x => x.BusinesstypeID).HasColumnName(@"BusinesstypeID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<BusinessType>().Property(x => x.BusinesstypeTh).HasColumnName(@"BusinesstypeTh").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BusinessType>().Property(x => x.BusinesstypeEng).HasColumnName(@"BusinesstypeEng").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BusinessType>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<BusinessType>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<BusinessType>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<BusinessType>().Property(x => x.UserManageID).HasColumnName(@"UserManageID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<BusinessType>().HasKey(@"BusinesstypeID");
        }

        partial void CustomizeBusinessTypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region Director Mapping

        private void DirectorMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Director>().ToTable(@"Directors", @"dbo");
            modelBuilder.Entity<Director>().Property(x => x.DirectorID).HasColumnName(@"DirectorID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Director>().Property(x => x.EmployerID).HasColumnName(@"EmployerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<Director>().Property(x => x.NameTh).HasColumnName(@"NameTh").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Director>().Property(x => x.NameEng).HasColumnName(@"NameEng").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Director>().Property(x => x.PositionTh).HasColumnName(@"PositionTh").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Director>().Property(x => x.PositionEng).HasColumnName(@"PositionEng").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Director>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Director>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Director>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Director>().Property(x => x.UserManager).HasColumnName(@"UserManager").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Director>().HasKey(@"DirectorID");
        }

        partial void CustomizeDirectorMapping(ModelBuilder modelBuilder);

        #endregion

        #region DocumentType Mapping

        private void DocumentTypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DocumentType>().ToTable(@"DocumentTypes", @"dbo");
            modelBuilder.Entity<DocumentType>().Property(x => x.DocumenttypeID).HasColumnName(@"DocumenttypeID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<DocumentType>().Property(x => x.DocumentnameTh).HasColumnName(@"DocumentnameTh").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<DocumentType>().Property(x => x.DocumentnameEng).HasColumnName(@"DocumentnameEng").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<DocumentType>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<DocumentType>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<DocumentType>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<DocumentType>().Property(x => x.UserManageID).HasColumnName(@"UserManageID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<DocumentType>().HasKey(@"DocumenttypeID");
        }

        partial void CustomizeDocumentTypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region EmployerAddress Mapping

        private void EmployerAddressMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EmployerAddress>().ToTable(@"EmployerAddresses", @"dbo");
            modelBuilder.Entity<EmployerAddress>().Property(x => x.AddressID).HasColumnName(@"AddressID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EmployerAddress>().Property(x => x.EmployerID).HasColumnName(@"EmployerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EmployerAddress>().Property(x => x.HouseNo).HasColumnName(@"HouseNo").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<EmployerAddress>().Property(x => x.Soi).HasColumnName(@"Soi").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<EmployerAddress>().Property(x => x.Road).HasColumnName(@"Road").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<EmployerAddress>().Property(x => x.SubdistrictTh).HasColumnName(@"SubdistrictTh").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<EmployerAddress>().Property(x => x.DistrictTh).HasColumnName(@"DistrictTh").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<EmployerAddress>().Property(x => x.ProvinceTh).HasColumnName(@"ProvinceTh").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<EmployerAddress>().Property(x => x.Postcode).HasColumnName(@"Postcode").HasColumnType(@"nvarchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<EmployerAddress>().Property(x => x.SubdistrictEng).HasColumnName(@"SubdistrictEng").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<EmployerAddress>().Property(x => x.DistrictEng).HasColumnName(@"DistrictEng").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<EmployerAddress>().Property(x => x.ProvinceEng).HasColumnName(@"ProvinceEng").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<EmployerAddress>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<EmployerAddress>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<EmployerAddress>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<EmployerAddress>().Property(x => x.UserManageID).HasColumnName(@"UserManageID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EmployerAddress>().HasKey(@"AddressID");
        }

        partial void CustomizeEmployerAddressMapping(ModelBuilder modelBuilder);

        #endregion

        #region EmployerContact Mapping

        private void EmployerContactMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EmployerContact>().ToTable(@"EmployerContacts", @"dbo");
            modelBuilder.Entity<EmployerContact>().Property(x => x.ContactID).HasColumnName(@"ContactID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EmployerContact>().Property(x => x.EmployerID).HasColumnName(@"EmployerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EmployerContact>().Property(x => x.NameTh).HasColumnName(@"NameTh").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<EmployerContact>().Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType(@"nvarchar(20)").IsRequired().ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<EmployerContact>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<EmployerContact>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<EmployerContact>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<EmployerContact>().Property(x => x.UserManageID).HasColumnName(@"UserManageID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EmployerContact>().HasKey(@"ContactID");
        }

        partial void CustomizeEmployerContactMapping(ModelBuilder modelBuilder);

        #endregion

        #region EmployerDocument Mapping

        private void EmployerDocumentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EmployerDocument>().ToTable(@"EmployerDocuments", @"dbo");
            modelBuilder.Entity<EmployerDocument>().Property(x => x.DocumentID).HasColumnName(@"DocumentID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EmployerDocument>().Property(x => x.EmployerID).HasColumnName(@"EmployerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EmployerDocument>().Property(x => x.DocumenttypeID).HasColumnName(@"DocumenttypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EmployerDocument>().Property(x => x.ExpiryDate).HasColumnName(@"ExpiryDate").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<EmployerDocument>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<EmployerDocument>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<EmployerDocument>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<EmployerDocument>().Property(x => x.UserManageID).HasColumnName(@"UserManageID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EmployerDocument>().HasKey(@"DocumentID");
        }

        partial void CustomizeEmployerDocumentMapping(ModelBuilder modelBuilder);

        #endregion

        #region EmployerJob Mapping

        private void EmployerJobMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EmployerJob>().ToTable(@"EmployerJobs", @"dbo");
            modelBuilder.Entity<EmployerJob>().Property(x => x.JobID).HasColumnName(@"JobID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<EmployerJob>().Property(x => x.EmployerID).HasColumnName(@"EmployerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EmployerJob>().Property(x => x.JobtypeTh).HasColumnName(@"JobtypeTh").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<EmployerJob>().Property(x => x.JobdescriptionTh).HasColumnName(@"JobdescriptionTh").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<EmployerJob>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<EmployerJob>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<EmployerJob>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<EmployerJob>().Property(x => x.UserManageID).HasColumnName(@"UserManageID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<EmployerJob>().HasKey(@"JobID");
        }

        partial void CustomizeEmployerJobMapping(ModelBuilder modelBuilder);

        #endregion

        #region Employer Mapping

        private void EmployerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Employer>().ToTable(@"Employers", @"dbo");
            modelBuilder.Entity<Employer>().Property(x => x.EmployerID).HasColumnName(@"EmployerID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Employer>().Property(x => x.EmployerCode).HasColumnName(@"EmployerCode").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Employer>().Property(x => x.NameTh).HasColumnName(@"NameTh").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Employer>().Property(x => x.NameEng).HasColumnName(@"NameEng").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Employer>().Property(x => x.BusinesstypeID).HasColumnName(@"BusinesstypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<Employer>().Property(x => x.CompanyID).HasColumnName(@"CompanyID").HasColumnType(@"nvarchar(13)").IsRequired().ValueGeneratedNever().HasMaxLength(13);
            modelBuilder.Entity<Employer>().Property(x => x.RegistrationDate).HasColumnName(@"RegistrationDate").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Employer>().Property(x => x.RegisteredCapital).HasColumnName(@"RegisteredCapital").HasColumnType(@"decimal(15,2)").IsRequired().ValueGeneratedNever().HasPrecision(15, 2);
            modelBuilder.Entity<Employer>().Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Employer>().Property(x => x.UpdatedAt).HasColumnName(@"UpdatedAt").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Employer>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Employer>().Property(x => x.UserManageID).HasColumnName(@"UserManageID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<Employer>().HasKey(@"EmployerID");
            modelBuilder.Entity<Employer>().HasIndex(@"EmployerCode").IsUnique(true);
            modelBuilder.Entity<Employer>().HasIndex(@"CompanyID").IsUnique(true);
        }

        partial void CustomizeEmployerMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Company>().HasMany(x => x.PowerOfAttorneys_CompanyID).WithOne(op => op.Company_CompanyID).IsRequired(true).HasForeignKey(@"CompanyID");
            modelBuilder.Entity<Company>().HasMany(x => x.Users).WithOne(op => op.Company).IsRequired(false).HasForeignKey(@"CompanyID");

            modelBuilder.Entity<Department>().HasMany(x => x.Users).WithOne(op => op.Department).IsRequired(false).HasForeignKey(@"DepartmentID");

            modelBuilder.Entity<Position>().HasMany(x => x.Users).WithOne(op => op.Position).IsRequired(false).HasForeignKey(@"PositionID");

            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.Company_CompanyID).WithMany(op => op.PowerOfAttorneys_CompanyID).IsRequired(true).HasForeignKey(@"CompanyID");
            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.User_GrantorID).WithMany(op => op.PowerOfAttorneys_GrantorID).IsRequired(true).HasForeignKey(@"GrantorID");
            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.User_AttorneyID).WithMany(op => op.PowerOfAttorneys_AttorneyID).IsRequired(true).HasForeignKey(@"AttorneyID");
            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.User_GrantorApprovalBy).WithMany(op => op.PowerOfAttorneys_GrantorApprovalBy).IsRequired(false).HasForeignKey(@"GrantorApprovalBy");
            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.User_AttorneyApprovalBy).WithMany(op => op.PowerOfAttorneys_AttorneyApprovalBy).IsRequired(false).HasForeignKey(@"AttorneyApprovalBy");
            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.User_WitnessApprovalBy1).WithMany(op => op.PowerOfAttorneys_WitnessApprovalBy1).IsRequired(false).HasForeignKey(@"WitnessApprovalBy1");
            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.User_WitnessApprovalBy2).WithMany(op => op.PowerOfAttorneys_WitnessApprovalBy2).IsRequired(false).HasForeignKey(@"WitnessApprovalBy2");

            modelBuilder.Entity<UserPermission>().HasOne(x => x.User).WithMany(op => op.UserPermissions).IsRequired(true).HasForeignKey(@"UserID");

            modelBuilder.Entity<User>().HasOne(x => x.Position).WithMany(op => op.Users).IsRequired(false).HasForeignKey(@"PositionID");
            modelBuilder.Entity<User>().HasOne(x => x.Department).WithMany(op => op.Users).IsRequired(false).HasForeignKey(@"DepartmentID");
            modelBuilder.Entity<User>().HasOne(x => x.Company).WithMany(op => op.Users).IsRequired(false).HasForeignKey(@"CompanyID");
            modelBuilder.Entity<User>().HasMany(x => x.BusinessTypes).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserManageID");
            modelBuilder.Entity<User>().HasMany(x => x.DocumentTypes).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserManageID");
            modelBuilder.Entity<User>().HasMany(x => x.EmployerAddresses).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserManageID");
            modelBuilder.Entity<User>().HasMany(x => x.EmployerContacts).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserManageID");
            modelBuilder.Entity<User>().HasMany(x => x.EmployerDocuments).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserManageID");
            modelBuilder.Entity<User>().HasMany(x => x.EmployerJobs).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserManageID");
            modelBuilder.Entity<User>().HasMany(x => x.Employers).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserManageID");
            modelBuilder.Entity<User>().HasMany(x => x.PowerOfAttorneys_GrantorID).WithOne(op => op.User_GrantorID).IsRequired(true).HasForeignKey(@"GrantorID");
            modelBuilder.Entity<User>().HasMany(x => x.PowerOfAttorneys_AttorneyID).WithOne(op => op.User_AttorneyID).IsRequired(true).HasForeignKey(@"AttorneyID");
            modelBuilder.Entity<User>().HasMany(x => x.PowerOfAttorneys_GrantorApprovalBy).WithOne(op => op.User_GrantorApprovalBy).IsRequired(false).HasForeignKey(@"GrantorApprovalBy");
            modelBuilder.Entity<User>().HasMany(x => x.PowerOfAttorneys_AttorneyApprovalBy).WithOne(op => op.User_AttorneyApprovalBy).IsRequired(false).HasForeignKey(@"AttorneyApprovalBy");
            modelBuilder.Entity<User>().HasMany(x => x.PowerOfAttorneys_WitnessApprovalBy1).WithOne(op => op.User_WitnessApprovalBy1).IsRequired(false).HasForeignKey(@"WitnessApprovalBy1");
            modelBuilder.Entity<User>().HasMany(x => x.PowerOfAttorneys_WitnessApprovalBy2).WithOne(op => op.User_WitnessApprovalBy2).IsRequired(false).HasForeignKey(@"WitnessApprovalBy2");
            modelBuilder.Entity<User>().HasMany(x => x.UserPermissions).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserID");
            modelBuilder.Entity<User>().HasMany(x => x.LogSystemDatas).WithOne(op => op.User).IsRequired(false).HasForeignKey(@"UserManageID");
            modelBuilder.Entity<User>().HasMany(x => x.LoginHistories).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserID");

            modelBuilder.Entity<LogSystemData>().HasOne(x => x.User).WithMany(op => op.LogSystemDatas).IsRequired(false).HasForeignKey(@"UserManageID");

            modelBuilder.Entity<LoginHistory>().HasOne(x => x.User).WithMany(op => op.LoginHistories).IsRequired(true).HasForeignKey(@"UserID");

            modelBuilder.Entity<BusinessType>().HasMany(x => x.Employers).WithOne(op => op.BusinessType).IsRequired(true).HasForeignKey(@"BusinesstypeID");
            modelBuilder.Entity<BusinessType>().HasOne(x => x.User).WithMany(op => op.BusinessTypes).IsRequired(true).HasForeignKey(@"UserManageID");

            modelBuilder.Entity<Director>().HasOne(x => x.Employer).WithMany(op => op.Directors).IsRequired(true).HasForeignKey(@"EmployerID");

            modelBuilder.Entity<DocumentType>().HasMany(x => x.EmployerDocuments).WithOne(op => op.DocumentType).IsRequired(true).HasForeignKey(@"DocumenttypeID");
            modelBuilder.Entity<DocumentType>().HasOne(x => x.User).WithMany(op => op.DocumentTypes).IsRequired(true).HasForeignKey(@"UserManageID");

            modelBuilder.Entity<EmployerAddress>().HasOne(x => x.Employer).WithMany(op => op.EmployerAddresses).IsRequired(true).HasForeignKey(@"EmployerID");
            modelBuilder.Entity<EmployerAddress>().HasOne(x => x.User).WithMany(op => op.EmployerAddresses).IsRequired(true).HasForeignKey(@"UserManageID");

            modelBuilder.Entity<EmployerContact>().HasOne(x => x.Employer).WithMany(op => op.EmployerContacts).IsRequired(true).HasForeignKey(@"EmployerID");
            modelBuilder.Entity<EmployerContact>().HasOne(x => x.User).WithMany(op => op.EmployerContacts).IsRequired(true).HasForeignKey(@"UserManageID");

            modelBuilder.Entity<EmployerDocument>().HasOne(x => x.Employer).WithMany(op => op.EmployerDocuments).IsRequired(true).HasForeignKey(@"EmployerID");
            modelBuilder.Entity<EmployerDocument>().HasOne(x => x.DocumentType).WithMany(op => op.EmployerDocuments).IsRequired(true).HasForeignKey(@"DocumenttypeID");
            modelBuilder.Entity<EmployerDocument>().HasOne(x => x.User).WithMany(op => op.EmployerDocuments).IsRequired(true).HasForeignKey(@"UserManageID");

            modelBuilder.Entity<EmployerJob>().HasOne(x => x.Employer).WithMany(op => op.EmployerJobs).IsRequired(true).HasForeignKey(@"EmployerID");
            modelBuilder.Entity<EmployerJob>().HasOne(x => x.User).WithMany(op => op.EmployerJobs).IsRequired(true).HasForeignKey(@"UserManageID");

            modelBuilder.Entity<Employer>().HasMany(x => x.Directors).WithOne(op => op.Employer).IsRequired(true).HasForeignKey(@"EmployerID");
            modelBuilder.Entity<Employer>().HasMany(x => x.EmployerAddresses).WithOne(op => op.Employer).IsRequired(true).HasForeignKey(@"EmployerID");
            modelBuilder.Entity<Employer>().HasMany(x => x.EmployerContacts).WithOne(op => op.Employer).IsRequired(true).HasForeignKey(@"EmployerID");
            modelBuilder.Entity<Employer>().HasMany(x => x.EmployerDocuments).WithOne(op => op.Employer).IsRequired(true).HasForeignKey(@"EmployerID");
            modelBuilder.Entity<Employer>().HasMany(x => x.EmployerJobs).WithOne(op => op.Employer).IsRequired(true).HasForeignKey(@"EmployerID");
            modelBuilder.Entity<Employer>().HasOne(x => x.BusinessType).WithMany(op => op.Employers).IsRequired(true).HasForeignKey(@"BusinesstypeID");
            modelBuilder.Entity<Employer>().HasOne(x => x.User).WithMany(op => op.Employers).IsRequired(true).HasForeignKey(@"UserManageID");
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
