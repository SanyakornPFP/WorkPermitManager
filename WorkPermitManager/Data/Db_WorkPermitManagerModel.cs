//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 10-Jan-25 8:05:09 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using WorkPermitManager.Models;
using Microsoft.Extensions.Configuration;

namespace WorkPermitManager.Data
{

    public partial class Db_WorkPermitManagerModel : DbContext
    {

        public Db_WorkPermitManagerModel() :
            base()
        {
            OnCreated();
        }

        public Db_WorkPermitManagerModel(DbContextOptions<Db_WorkPermitManagerModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(GetConnectionString("WorkPermitManagerModelConnectionString"));
                optionsBuilder.UseLazyLoadingProxies();
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Company> Companies
        {
            get;
            set;
        }

        public virtual DbSet<Department> Departments
        {
            get;
            set;
        }

        public virtual DbSet<Position> Positions
        {
            get;
            set;
        }

        public virtual DbSet<PowerOfAttorney> PowerOfAttorneys
        {
            get;
            set;
        }

        public virtual DbSet<UserPermission> UserPermissions
        {
            get;
            set;
        }

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.CompanyMapping(modelBuilder);
            this.CustomizeCompanyMapping(modelBuilder);

            this.DepartmentMapping(modelBuilder);
            this.CustomizeDepartmentMapping(modelBuilder);

            this.PositionMapping(modelBuilder);
            this.CustomizePositionMapping(modelBuilder);

            this.PowerOfAttorneyMapping(modelBuilder);
            this.CustomizePowerOfAttorneyMapping(modelBuilder);

            this.UserPermissionMapping(modelBuilder);
            this.CustomizeUserPermissionMapping(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Company Mapping

        private void CompanyMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Company>().ToTable(@"Companies", @"dbo");
            modelBuilder.Entity<Company>().Property(x => x.CompanyID).HasColumnName(@"CompanyID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Company>().Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Company>().Property(x => x.CompanyAddress).HasColumnName(@"CompanyAddress").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Company>().Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Company>().Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Company>().Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Company>().HasKey(@"CompanyID");
        }

        partial void CustomizeCompanyMapping(ModelBuilder modelBuilder);

        #endregion

        #region Department Mapping

        private void DepartmentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Department>().ToTable(@"Departments", @"dbo");
            modelBuilder.Entity<Department>().Property(x => x.DepartmentID).HasColumnName(@"DepartmentID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Department>().Property(x => x.DepartmentName).HasColumnName(@"DepartmentName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Department>().Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Department>().Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Department>().Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Department>().HasKey(@"DepartmentID");
        }

        partial void CustomizeDepartmentMapping(ModelBuilder modelBuilder);

        #endregion

        #region Position Mapping

        private void PositionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Position>().ToTable(@"Positions", @"dbo");
            modelBuilder.Entity<Position>().Property(x => x.PositionID).HasColumnName(@"PositionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Position>().Property(x => x.PositionName).HasColumnName(@"PositionName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Position>().Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Position>().Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<Position>().Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Position>().HasKey(@"PositionID");
        }

        partial void CustomizePositionMapping(ModelBuilder modelBuilder);

        #endregion

        #region PowerOfAttorney Mapping

        private void PowerOfAttorneyMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PowerOfAttorney>().ToTable(@"PowerOfAttorney", @"dbo");
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.DocumentID).HasColumnName(@"DocumentID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.CompanyID).HasColumnName(@"CompanyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.GrantorID).HasColumnName(@"GrantorID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.GrantorCardID).HasColumnName(@"GrantorCardID").HasColumnType(@"char(13)").IsRequired().ValueGeneratedNever().HasMaxLength(13);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.AttorneyID).HasColumnName(@"AttorneyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.AttorneyCardID).HasColumnName(@"AttorneyCardID").HasColumnType(@"char(13)").IsRequired().ValueGeneratedNever().HasMaxLength(13);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.AttorneyCompanyID).HasColumnName(@"AttorneyCompanyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.GrantorApprovalStatus).HasColumnName(@"GrantorApprovalStatus").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20).HasDefaultValueSql(@"N'รอดำเนินการ'");
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.GrantorApprovalBy).HasColumnName(@"GrantorApprovalBy").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.AttorneyApprovalStatus).HasColumnName(@"AttorneyApprovalStatus").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20).HasDefaultValueSql(@"N'รอดำเนินการ'");
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.AttorneyApprovalBy).HasColumnName(@"AttorneyApprovalBy").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.WitnessApprovalStatus1).HasColumnName(@"WitnessApprovalStatus1").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20).HasDefaultValueSql(@"N'รอดำเนินการ'");
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.WitnessApprovalBy1).HasColumnName(@"WitnessApprovalBy1").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.WitnessApprovalStatus2).HasColumnName(@"WitnessApprovalStatus2").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20).HasDefaultValueSql(@"N'รอดำเนินการ'");
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.WitnessApprovalBy2).HasColumnName(@"WitnessApprovalBy2").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<PowerOfAttorney>().Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<PowerOfAttorney>().HasKey(@"DocumentID");
        }

        partial void CustomizePowerOfAttorneyMapping(ModelBuilder modelBuilder);

        #endregion

        #region UserPermission Mapping

        private void UserPermissionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UserPermission>().ToTable(@"UserPermissions", @"dbo");
            modelBuilder.Entity<UserPermission>().Property(x => x.PermissionID).HasColumnName(@"PermissionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<UserPermission>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<UserPermission>().Property(x => x.FunctionName).HasColumnName(@"FunctionName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<UserPermission>().Property(x => x.CanCreate).HasColumnName(@"CanCreate").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<UserPermission>().Property(x => x.CanRead).HasColumnName(@"CanRead").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<UserPermission>().Property(x => x.CanUpdate).HasColumnName(@"CanUpdate").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<UserPermission>().Property(x => x.CanDelete).HasColumnName(@"CanDelete").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<UserPermission>().Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<UserPermission>().Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<UserPermission>().Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<UserPermission>().HasKey(@"PermissionID");
        }

        partial void CustomizeUserPermissionMapping(ModelBuilder modelBuilder);

        #endregion

        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"Users", @"dbo");
            modelBuilder.Entity<User>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<User>().Property(x => x.Username).HasColumnName(@"Username").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property(x => x.Password).HasColumnName(@"Password").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<User>().Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<User>().Property(x => x.PositionID).HasColumnName(@"PositionID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<User>().Property(x => x.DepartmentID).HasColumnName(@"DepartmentID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<User>().Property(x => x.CompanyID).HasColumnName(@"CompanyID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<User>().Property(x => x.CardID).HasColumnName(@"CardID").HasColumnType(@"char(13)").IsRequired().ValueGeneratedNever().HasMaxLength(13);
            modelBuilder.Entity<User>().Property(x => x.ProfilePicture).HasColumnName(@"ProfilePicture").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.Signature).HasColumnName(@"Signature").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.Email).HasColumnName(@"Email").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<User>().Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<User>().Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<User>().Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType(@"bit").ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<User>().HasKey(@"UserID");
            modelBuilder.Entity<User>().HasIndex(@"CardID").IsUnique(true);
        }

        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Company>().HasMany(x => x.PowerOfAttorneys_CompanyID).WithOne(op => op.Company_CompanyID).IsRequired(true).HasForeignKey(@"CompanyID");
            modelBuilder.Entity<Company>().HasMany(x => x.PowerOfAttorneys_AttorneyCompanyID).WithOne(op => op.Company_AttorneyCompanyID).IsRequired(true).HasForeignKey(@"AttorneyCompanyID");
            modelBuilder.Entity<Company>().HasMany(x => x.Users).WithOne(op => op.Company).IsRequired(false).HasForeignKey(@"CompanyID");

            modelBuilder.Entity<Department>().HasMany(x => x.Users).WithOne(op => op.Department).IsRequired(false).HasForeignKey(@"DepartmentID");

            modelBuilder.Entity<Position>().HasMany(x => x.Users).WithOne(op => op.Position).IsRequired(false).HasForeignKey(@"PositionID");

            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.Company_CompanyID).WithMany(op => op.PowerOfAttorneys_CompanyID).IsRequired(true).HasForeignKey(@"CompanyID");
            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.User_GrantorID).WithMany(op => op.PowerOfAttorneys_GrantorID).IsRequired(true).HasForeignKey(@"GrantorID");
            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.User_AttorneyID).WithMany(op => op.PowerOfAttorneys_AttorneyID).IsRequired(true).HasForeignKey(@"AttorneyID");
            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.Company_AttorneyCompanyID).WithMany(op => op.PowerOfAttorneys_AttorneyCompanyID).IsRequired(true).HasForeignKey(@"AttorneyCompanyID");
            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.User_GrantorApprovalBy).WithMany(op => op.PowerOfAttorneys_GrantorApprovalBy).IsRequired(false).HasForeignKey(@"GrantorApprovalBy");
            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.User_AttorneyApprovalBy).WithMany(op => op.PowerOfAttorneys_AttorneyApprovalBy).IsRequired(false).HasForeignKey(@"AttorneyApprovalBy");
            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.User_WitnessApprovalBy1).WithMany(op => op.PowerOfAttorneys_WitnessApprovalBy1).IsRequired(false).HasForeignKey(@"WitnessApprovalBy1");
            modelBuilder.Entity<PowerOfAttorney>().HasOne(x => x.User_WitnessApprovalBy2).WithMany(op => op.PowerOfAttorneys_WitnessApprovalBy2).IsRequired(false).HasForeignKey(@"WitnessApprovalBy2");

            modelBuilder.Entity<UserPermission>().HasOne(x => x.User).WithMany(op => op.UserPermissions).IsRequired(true).HasForeignKey(@"UserID");

            modelBuilder.Entity<User>().HasMany(x => x.PowerOfAttorneys_GrantorID).WithOne(op => op.User_GrantorID).IsRequired(true).HasForeignKey(@"GrantorID");
            modelBuilder.Entity<User>().HasMany(x => x.PowerOfAttorneys_AttorneyID).WithOne(op => op.User_AttorneyID).IsRequired(true).HasForeignKey(@"AttorneyID");
            modelBuilder.Entity<User>().HasMany(x => x.PowerOfAttorneys_GrantorApprovalBy).WithOne(op => op.User_GrantorApprovalBy).IsRequired(false).HasForeignKey(@"GrantorApprovalBy");
            modelBuilder.Entity<User>().HasMany(x => x.PowerOfAttorneys_AttorneyApprovalBy).WithOne(op => op.User_AttorneyApprovalBy).IsRequired(false).HasForeignKey(@"AttorneyApprovalBy");
            modelBuilder.Entity<User>().HasMany(x => x.PowerOfAttorneys_WitnessApprovalBy1).WithOne(op => op.User_WitnessApprovalBy1).IsRequired(false).HasForeignKey(@"WitnessApprovalBy1");
            modelBuilder.Entity<User>().HasMany(x => x.PowerOfAttorneys_WitnessApprovalBy2).WithOne(op => op.User_WitnessApprovalBy2).IsRequired(false).HasForeignKey(@"WitnessApprovalBy2");
            modelBuilder.Entity<User>().HasMany(x => x.UserPermissions).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserID");
            modelBuilder.Entity<User>().HasOne(x => x.Position).WithMany(op => op.Users).IsRequired(false).HasForeignKey(@"PositionID");
            modelBuilder.Entity<User>().HasOne(x => x.Department).WithMany(op => op.Users).IsRequired(false).HasForeignKey(@"DepartmentID");
            modelBuilder.Entity<User>().HasOne(x => x.Company).WithMany(op => op.Users).IsRequired(false).HasForeignKey(@"CompanyID");
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
